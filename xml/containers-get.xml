<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter version="5.0" xml:id="cha-containers-get"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
 <info>
  <title>Getting Containers</title><date>2020-07-27</date>
 </info>
 <para>
  This chapter is about how and where to get ready built container images.
 </para>
 <sect1 xml:id="id-sle-base-images">
  <title>&sle; Base Images</title>

  <para>
   &suse; offers a large number of official container base images, which users
   can use to build containers with. Each base image &slea; contains the &slea;
   OS of a particular &slea; release minus the kernel. The OS contained in the
   base image is an empty environment without any further functionality. You,
   as a user, put your own workload into it, to make it functional.
  </para>

  <para>
   Base images are available through the &suse; Registry under
   <literal>registry.suse.com</literal>. For details about &suse; Registry see
   <xref linkend="suse-registry"/>. The images you can find in the &suse;
   Registry are all Generally Available (Production) and
   <link xlink:href="https://www.suse.com/products/long-term-service-pack-support/">LTSS</link>
   releases of SLES 12 and SLES 15. The available images are all compressed to
   a minimal size of <emphasis role="strong">40MB</emphasis>. &sle; base images
   in &suse; Registry are also fully supported, which means they get regularly
   updated with security fixes and the &suse; support plans apply. For more
   information about the support plans see
   <xref linkend="cha-containers-support"/>.
  </para>
 </sect1>
 <sect1 xml:id="id-suse-container-properties">
  <title>&suse; Container Properties</title>

  <para>
   &suse; container images have a number of properties, which can be useful to
   the user for identifying the right one. The individual properties listed
   below can be accessed after you have pulled a container image from the
   repository and run <literal>podman inspect</literal> on it.
  </para>

  <sect2 xml:id="id-repository-names">
   <title>Repository names</title>
   <para>
    Repository names start with the name of the product, e.g.
    <literal>suse/sle/(…​)</literal>,
    <literal>opensuse/tumbleweed/(…​)</literal>,
    <literal>caasp/(…​)</literal> and etc. All &slea; 15 containers for all
    service packs are in the namespace <literal>suse/sle15</literal>. This
    strategy will also be applied to future versions of &slea;, e.g.
    <literal>suse/sle16</literal> and so on. For &slea; 12 however, there is a
    separate repository name for each service pack, e.g.
    <literal>suse/sle12sp3</literal>, <literal>suse/sle12sp4</literal>,
    <literal>suse/sle12sp5</literal>.
   </para>
  </sect2>

  <sect2 xml:id="id-labels">
   <title>Labels</title>
   <para>
    Labels are another way to identify images. All &slea; container image
    labels begin with
    <literal>com.suse.&lt;product&gt;.&lt;containername&gt;</literal> after
    which follows a further specification. {opensuse} container images are
    identified by a label that begins with
    <literal>org.opencontainers</literal>.
   </para>
   <important>
    <title>The <literal>com.suse.sle.base</literal> label is protected.</title>
    <para>
     With every new layer added to a base image, labels defined in the base
     container get overwritten by labels in the derived image. And because the
     base images are only the bare OS and any functionality added by the user
     leads to the creation of a new layer, the labels get overwritten very
     easily. In order to protect information about the origin of the image, the
     label <literal>com.suse.sle.base</literal> has been added to &slea;
     container images. This signifies that &suse; is the vendor of this image
     and this label <emphasis role="strong">must not be overwritten in derived
     images</emphasis>. For example the label
     <literal>com.suse.sle.base.title</literal> contains the image name "SUSE
     Linux Enterprise 15 Base Container", which is information that cannot be
     overwritten with any other layer of the image.
    </para>
    <para>
     The opposite is true for {opensuse} base images, where labels do get
     overwritten. For example <literal>org.opencontainers.image.title</literal>
     can get overwritten and will always contain the title of the latest added
     layer.
    </para>
   </important>
   <para>
    A list of all currently defined labels follows:
   </para>
   <table frame="all" rowsep="1" colsep="1">
    <title>Currently Defined Labels</title>
    <tgroup cols="5">
     <colspec colname="col_1" colwidth="20*"/>
     <colspec colname="col_2" colwidth="20*"/>
     <colspec colname="col_3" colwidth="20*"/>
     <colspec colname="col_4" colwidth="20*"/>
     <colspec colname="col_5" colwidth="20*"/>
     <thead>
      <row>
       <entry align="left" valign="top">Must be provided by derived images</entry>
       <entry align="left" valign="top">Labels</entry>
       <entry align="left" valign="top">OCI Annotation</entry>
       <entry align="left" valign="top">Description</entry>
       <entry align="left" valign="top">Example</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry align="left" valign="top">
        <para>
         ✓
        </para>
       </entry>
       <entry align="left" valign="top">
        <para>
         org.opencontainers.image.<emphasis role="strong">title</emphasis>
         com.suse.sle.base.<emphasis role="strong">title</emphasis>
        </para>
       </entry>
       <entry align="left" valign="top">
        <para>
         org.opencontainers.image.title
        </para>
       </entry>
       <entry align="left" valign="top">
        <para>
         Title of the image
        </para>
       </entry>
       <entry align="left" valign="top">
        <para>
         SUSE Linux Enterprise 15 Base Container
        </para>
       </entry>
      </row>
      <row>
       <entry align="left" valign="top">
        <para>
         ✓
        </para>
       </entry>
       <entry align="left" valign="top">
        <para>
         org.opencontainers.image.<emphasis role="strong">description</emphasis>
         com.suse.sle.base.<emphasis role="strong">description</emphasis>
        </para>
       </entry>
       <entry align="left" valign="top">
        <para>
         org.opencontainers.image.description
        </para>
       </entry>
       <entry align="left" valign="top">
        <para>
         Short description of the image
        </para>
       </entry>
       <entry align="left" valign="top">
        <para>
         Image containing a minimal environment for containers based on SUSE
         Linux Enterprise 15.
        </para>
       </entry>
      </row>
      <row>
       <entry align="left" valign="top">
        <para>
         ✓
        </para>
       </entry>
       <entry align="left" valign="top">
        <para>
         org.opencontainers.image.<emphasis role="strong">version</emphasis>
         com.suse.sle.base.<emphasis role="strong">version</emphasis>
        </para>
       </entry>
       <entry align="left" valign="top">
        <para>
         org.opencontainers.image.version
        </para>
       </entry>
       <entry align="left" valign="top">
        <para>
         Version of the image
        </para>
       </entry>
       <entry align="left" valign="top">
        <para>
         &lt;codestream&gt;.&lt;sp&gt;.&lt;cicnt&gt;.&lt;bldcnt&gt; 15.0.4.2
        </para>
       </entry>
      </row>
      <row>
       <entry align="left" valign="top">
        <para>
         ✓
        </para>
       </entry>
       <entry align="left" valign="top">
        <para>
         org.opencontainers.image.<emphasis role="strong">created</emphasis>
         com.suse.sle.base.<emphasis role="strong">created</emphasis>
        </para>
       </entry>
       <entry align="left" valign="top">
        <para>
         org.opencontainers.image.created
        </para>
       </entry>
       <entry align="left" valign="top">
        <para>
         Date/time of image build
        </para>
       </entry>
       <entry align="left" valign="top">
        <para>
         2018-07-27T14:12:30Z
        </para>
       </entry>
      </row>
      <row>
       <entry align="left" valign="top">
        <para>
         X
        </para>
       </entry>
       <entry align="left" valign="top">
        <para>
         org.opencontainers.image.<emphasis role="strong">vendor</emphasis>
         com.suse.sle.base.<emphasis role="strong">vendor</emphasis>
        </para>
       </entry>
       <entry align="left" valign="top">
        <para>
         org.opencontainers.image.vendor
        </para>
       </entry>
       <entry align="left" valign="top">
        <para>
         Vendor of the image
        </para>
       </entry>
       <entry align="left" valign="top">
        <para>
         SUSE LLC
        </para>
       </entry>
      </row>
      <row>
       <entry align="left" valign="top">
        <para>
         X
        </para>
       </entry>
       <entry align="left" valign="top">
        <para>
         org.opencontainers.image.<emphasis role="strong">url</emphasis>
         com.suse.sle.base.<emphasis role="strong">url</emphasis>
        </para>
       </entry>
       <entry align="left" valign="top">
        <para>
         org.opencontainers.image.url
        </para>
       </entry>
       <entry align="left" valign="top">
        <para>
         URL with more information
        </para>
       </entry>
       <entry align="left" valign="top">
        <para>
         <link xlink:href="https://www.suse.com/products/server/">https://www.suse.com/products/server/</link>
        </para>
       </entry>
      </row>
      <row>
       <entry align="left" valign="top">
        <para>
         ✓
        </para>
       </entry>
       <entry align="left" valign="top">
        <para>
         org.openbuildservice.<emphasis role="strong">disturl</emphasis>
         com.suse.sle.base.<emphasis role="strong">disturl</emphasis>
        </para>
       </entry>
       <entry align="left" valign="top">
        <para>
         org.openbuildservice.disturl
        </para>
       </entry>
       <entry align="left" valign="top">
        <para>
         Dist URL as provided by OBS
        </para>
       </entry>
       <entry align="left" valign="top">
        <para>
         obs://build.suse.de/SUSE:SLE-15:Update:CR/images/2951b67133dd6384cacb28203174e030-sles15-image
        </para>
       </entry>
      </row>
      <row>
       <entry align="left" valign="top">
        <para>
         ✓
        </para>
       </entry>
       <entry align="left" valign="top">
        <para>
         org.opensuse.<emphasis role="strong">reference</emphasis>
         com.suse.sle.base.<emphasis role="strong">reference</emphasis>
        </para>
       </entry>
       <entry align="left" valign="top">
        <para>
         org.opensuse.reference
        </para>
       </entry>
       <entry align="left" valign="top">
        <para>
         Reference pointing to this specific image. The image you get with
         docker pull &lt;ref.name&gt; must not change.
        </para>
       </entry>
       <entry align="left" valign="top">
        <para>
         registry.suse.com/suse/sle15:4.2
        </para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </sect2>

  <sect2 xml:id="id-tags">
   <title>Tags</title>
   <para>
    Tags are used for clarity and unlike labels, they can be freely defined.
    Tags usually contain information about the specific version of the
    container image.
   </para>
   <para>
    During the release of a new build, the new builds are released into the
    target project and the old images are kept. If a tag is provided by
    multiple images, the newest image is used. Which tags a container image
    provides is entirely up to the maintainer of the image, as this varies
    depending on the use case.
   </para>
   <para>
    The conventional tag format is <literal>repository name</literal>:
    <literal>image version specification</literal>(usually version number). For
    example the tag for the latest published image of {15sp1} would be
    <literal>suse/sle15:15.1</literal>.
   </para>
   <para>
    The following table shows example &slea; container image tags that can be
    currently found on <literal>registry.suse.com</literal>. Some tags are
    regularly updated, which means they don’t annotate the exact image
    version, they rather have the function of placeholders, for example the
    latest image. The regularly updated tags are printed in bold.
   </para>
   <table frame="all" rowsep="1" colsep="1">
    <title>Examples of Currently Used Tags</title>
    <tgroup cols="2">
     <colspec colname="col_1" colwidth="50*"/>
     <colspec colname="col_2" colwidth="50*"/>
     <tbody>
      <row>
       <entry align="left" valign="top">
        <para>
         Repository name: Tag
        </para>
       </entry>
       <entry align="left" valign="top">
        <para>
         Description
        </para>
       </entry>
      </row>
      <row>
       <entry align="left" valign="top">
        <para>
         suse/sle12sp3: <emphasis role="strong">latest</emphasis>
        </para>
       </entry>
       <entry align="left" valign="top">
        <para>
         Latest published image of SLE 12 SP3.
        </para>
       </entry>
      </row>
      <row>
       <entry align="left" valign="top">
        <para>
         suse/sle12sp3: <emphasis role="strong">2.0.2</emphasis>
        </para>
       </entry>
       <entry align="left" valign="top">
        <para>
         Same as <literal>latest</literal>. Only kept for
         backwards-compatibility.
        </para>
       </entry>
      </row>
      <row>
       <entry align="left" valign="top">
        <para>
         suse/sle15: <emphasis role="strong">latest</emphasis>
        </para>
       </entry>
       <entry align="left" valign="top">
        <para>
         Latest published image of the SLE 15 codestream. Same as 15.1 and
         15.1.1.1 in this example.
        </para>
       </entry>
      </row>
      <row>
       <entry align="left" valign="top">
        <para>
         suse/sle15: <emphasis role="strong">15.1</emphasis>
        </para>
       </entry>
       <entry align="left" valign="top">
        <para>
         Latest published image of SLE 15 SP1.
        </para>
       </entry>
      </row>
      <row>
       <entry align="left" valign="top">
        <para>
         suse/sle15: 15.1.1.1
        </para>
       </entry>
       <entry align="left" valign="top">
        <para>
         Same as 15.1.1.0, but contains some updated packages.
        </para>
       </entry>
      </row>
      <row>
       <entry align="left" valign="top">
        <para>
         suse/sle15: 15.1.1.0
        </para>
       </entry>
       <entry align="left" valign="top">
        <para>
         First SLE 15 SP1 image.
        </para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </sect2>
 </sect1>
 <sect1 xml:id="suse-registry">
  <title>&suse; Registry</title>

  <para>
   The official &suse; Registry can be found under
   <literal>registry.suse.com</literal>. It is the only place from which to
   pull official tested and updated SLE and SLES base container images. All
   images in the &suse; Registry undergo a fixed maintenance process, they are
   regularly updated and security fixes applied. &suse; Registry free for
   everyone to use, but much more useful with an active customer subscription
   on the container host. That is because the subscription is used by the
   container and it is needed for the container images to get updates. The
   &suse; Registry as of now does not have a UI or a list of images, but all
   available images are listed in the examples in the
   <link xlink:href="https://documentation.suse.com/sles/15-SP1/single-html/SLES-dockerquick/#Building-Pre-build-Images">Docker
   Quickstart Guide</link>, which is also where you will find a description of
   how the image names are derived.
  </para>
 </sect1>
 <sect1 xml:id="comparing-containers">
  <title>Comparing Containers</title>

  <para>
   The
   <link xlink:href="https://github.com/GoogleContainerTools/container-diff#container-diff">container-diff</link>
   a useful tool for analyzing and comparing container images.
   <emphasis role="strong"><literal>container-diff</literal></emphasis> can
   examine images along several different criteria, including:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     Docker Image History
    </para>
   </listitem>
   <listitem>
    <para>
     Image file system
    </para>
   </listitem>
   <listitem>
    <para>
     Apt packages
    </para>
   </listitem>
   <listitem>
    <para>
     RPM packages
    </para>
   </listitem>
   <listitem>
    <para>
     pip packages
    </para>
   </listitem>
   <listitem>
    <para>
     npm packages
    </para>
   </listitem>
  </itemizedlist>

  <para>
   These analyses can be performed on a single image, or a
   <literal>diff</literal> can be performed on two images to compare.
   <literal>container-diff</literal> supports Docker images located in both a
   local Docker daemon and a remote registry. Tarballs with the correct
   extension (.tar, .tar.gz, .tgz) can also be provided to the tool directly.
  </para>

  <para>
   The <literal>container-diff</literal> package is part of the {sls} 15 SP2
   <emphasis role="strong">Containers Module</emphasis> or it can be installed
   separately. For instructions on how to install it, see the
   <link xlink:href="https://github.com/GoogleContainerTools/container-diff#installation">container-diff
   documentation</link>.
  </para>
 </sect1>
 <sect1 xml:id="id-on-premise-registry">
  <title>On-premise Registry</title>

  <sect2 xml:id="id-portus">
   <title>Portus</title>
   <para>
    <link xlink:href="http://port.us.org/">Portus</link> is an on-premise
    application whose main purpose is to provide users with
    <emphasis role="strong">authorization for their Docker
    registries</emphasis>. The other main goal of Portus is to provide a
    <emphasis role="strong">UI on top of your registry</emphasis>. It supports
    LDAP user authentication and allows easy private registry management. For
    further notable features of Portus, see:
    <link xlink:href="http://port.us.org/features.html">http://port.us.org/features.html</link>
   </para>
   <para>
    Portus can be deployed using a standard Docker container, but also inside a
    Kubernetes cluster and even on Bare metal. For deployment options and
    instructions on how to get started with exploring Portus inside a
    development environment, see
    <link xlink:href="http://port.us.org/docs/deploy.html">http://port.us.org/docs/deploy.html</link>.
   </para>
   <para>
    For instructions on how to install Portus from the SUSE Container Registry
    see the
    <link xlink:href="https://documentation.suse.com/sles/12-SP4/html/SLES-all/cha-registry-installation.html#sec-docker-portus">{slsa}
    Documentation</link>.
   </para>
  </sect2>
 </sect1>
</chapter>
