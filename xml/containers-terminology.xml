<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter version="5.0" xml:id="cha-containers-intro"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
 <info>
  <title>Introduction</title><date>2020-07-27</date>
 </info>
 <sect1 xml:id="id-terminology">
  <title>Terminology</title>

  <variablelist>
   <varlistentry>
    <term>Container</term>
    <listitem>
     <para>
      A container is a standard unit of software that packages up code and all
      its dependencies. This allows the container and it’s application to run
      quickly and reliably in various computing environments. Containers can
      encompass all the parts that are essential for an application to run
      without each container needing a separate machine. This is because unlike
      a virtual machine, the container doesn’t need its own kernel, instead,
      the container (or it’s image) shares the OS kernel of its host machine.
      Containers also enable the use of microservices: splitting up
      applications into small parts that work independently of each other, but
      communicate with each other.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Container Image</term>
    <listitem>
     <para>
      A container image is an unchangeable, static file that includes
      executable code so it can run an isolated process on IT infrastructure.
      The image is comprised of system libraries, system tools and other
      platforms settings a software program needs to run on a containerization
      platform. A container image is compiled from file system layers built
      onto a parent or base image. In practice the terms <emphasis>parent
      image</emphasis> and <emphasis>base image</emphasis> are sometimes used
      interchangeably, but are theoretically two different things.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Base Image</term>
    <listitem>
     <para>
      A base image is a wholly new image. If you need to completely control the
      contents of your container image, and therefore don’t want to derive it
      form an already existing image, you can build a base image or download
      one that has already been built for you. The process of building base
      images differs very much depending on the Linux distribution you want to
      use. A Dockerfile of a base image will say <literal>FROM
      scratch</literal> and have no parent image specified.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Parent Image</term>
    <listitem>
     <para>
      This is that the image that was the basis for your current container
      image. In other words, if your image is not a base image, it is derived
      from a parent image. In a Dockerfile the <literal>FROM</literal>
      directive is pointing to the parent image and most Docker containers are
      in fact created using parent images.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Container Orchestration</term>
    <listitem>
     <para>
      In order for the containers that make up an application to work other
      effectively, they need to be managed by something, or orchestrated.
      Orchestration is the automatic process of deploying, managing, scaling
      and scheduling the work of individual containers within multiple
      clusters. It makes sure that the containers network and communicate
      properly. One popular container orchestration tool is for example
      Kubernetes, which is open source and was originally developed by Google
      engineers.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Container Platform</term>
    <listitem>
     <para>
      CaaSP is a container platform.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
</chapter>
