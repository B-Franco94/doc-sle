<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter version="5.0" xml:id="cha-containers-build"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
 <info>
  <title>Building Containers</title><date>2020-07-27</date>
 </info>
 <para>
  This chapter documents various technologies and tools which can be used to
  create containers. Most of the tools mentioned below are part of the
  <emphasis role="strong">&sls; 15 SP2 Containers Module</emphasis>. You can
  see the full list of packages in the <emphasis role="strong">Containers
  Module</emphasis> in the &suse;
  <link xlink:href="https://scc.suse.com/packages?name=SUSE%20Linux%20Enterprise%20Server&amp;version=15.2&amp;arch=x86_64&amp;query=&amp;module=1963">Customer
  Center</link>.
 </para>
 <sect1 xml:id="id-build-tools-available-to-customers">
  <title>Build Tools Available to Customers</title>

  <sect2 xml:id="id-docker">
   <title>Docker</title>
   <para>
    Docker is many part system for creating and managing containers, it’s
    main part being the <emphasis role="strong">Docker Open Source
    Engine</emphasis> - a lightweight virtualization solution to run containers
    simultaneously on a single control host. Docker containers are defined in
    Dockerfiles, which describe how to assemble a private filesystem for a
    container, and can also contain some metadata describing how to run the
    container. Most Dockerfiles start from a parent image. For an introduction
    on how to create custom base &sle; docker images see
    <link xlink:href="https://documentation.suse.com/sles/15-SP1/single-html/SLES-dockerquick/">the
    Docker Open Source Engine Guide</link>.
   </para>
  </sect2>

  <sect2 xml:id="podman">
   <title>Podman</title>
   <para>
    Podman is short for <emphasis role="strong">Pod Manager tool</emphasis> and
    as it’s name would suggest, it’s purpose extends beyond just building
    images. It is a <emphasis role="strong">daemonless</emphasis> container
    engine for developing, managing, and running OCI containers on your Linux
    System and it is a fully supported alternative for Docker. Podman is also
    the default container runtime in <emphasis role="strong">openSUSE
    Kubic</emphasis> - a certified Kubernetes distribution &amp;
    container-related technologies built by the &opensuse; community. Podman
    can be used to create OCI-compliant container images using a Dockerfile and
    a range of commands similar to Docker. For example the <literal>podman
    build</literal> command fulfills essentially the same function as
    <literal>docker build</literal> except that it does not use the Docker
    daemon to do it. Another important feature of Podman are
    <emphasis role="strong">rootless container builds</emphasis>. By using user
    namespaces, which provide an isolation mechanism for Linux processes,
    Podman avoids requiring root privileges to create and run containers.
   </para>
   <para>
    For instructions on how to install and use Podman see
    <link xlink:href="https://podman.io/">the Podman Documentation</link>.
   </para>
  </sect2>

  <sect2 xml:id="id-buildah">
   <title>Buildah</title>
   <para>
    Buildah facilitates building <emphasis role="strong">Open Containers
    Initiative</emphasis> (OCI) container images. It is a complimentary tool to
    Podman (see<xref linkend="podman"/> ), in fact <literal>podman
    build</literal> uses Buildah to perform container image builds. Images can
    be built from already existing images, from scratch, and using Dockerfiles.
    OCI images built using the <emphasis role="strong">Buildah command line
    tool</emphasis> (CLI) and the underlying OCI based technologies (e.g.
    containers/image and containers/storage) are portable and can therefore run
    in a Docker environment.
   </para>
   <para>
    For instructions on how to install and use Buildah see
    <link xlink:href="https://buildah.io/">the Buildah Documentation</link> and
    <link xlink:href="https://github.com/containers/buildah/blob/master/docs/tutorials">tutorials</link>.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="id-suse-internal-build-tools">
  <title>SUSE-Internal Build Tools</title>

  <sect2 xml:id="id-open-build-service">
   <title>Open Build Service</title>
   <para>
    The <emphasis role="strong">Open Build Service</emphasis> (OBS) provides
    free infrastructure for building and storing RPM packages including various
    container formats. An important component of the OBS is also the
    <emphasis role="strong">OBS Container Registry</emphasis>. The
    <link xlink:href="https://registry.opensuse.org/cgi-bin/cooverview">OBS
    Container Registry</link> provides a detailed listing of all container
    images built by the OBS complete with command line code to pull the images
    into your local docker environment. The OBS &opensuse;
    <link xlink:href="https://build.opensuse.org/image_templates">container
    image templates</link> can be modified to specific needs and are the
    easiest way to create your own container branch. Container images can
    either be built with <emphasis role="strong">native Docker tools</emphasis>
    - based on an existing image using a Dockerfile. Or they can be built from
    scratch using the <emphasis role="strong">&kiwi; imaging
    solution</emphasis>.
   </para>
   <para>
    Instructions on how to build images on OBS can be found
    <link xlink:href="https://openbuildservice.org/2018/05/09/container-building-and-distribution/">here</link>.
   </para>
  </sect2>

  <sect2 xml:id="id-kiwi">
   <title>&kiwi;</title>
   <para>
    <emphasis role="strong">KIWI Next Generation</emphasis> is a multi purpose
    imaging solution. Beside container images, classical installation ISOs and
    images for virtual machines &kiwi; can also build images that boot via PXE
    or Vagrant boxes. The basis is an image XML description. Such a description
    is represented by a directory which includes at least one
    <literal>config.xml</literal> or <literal>.kiwi</literal> file and may as
    well include other files like scripts or configuration data. The image
    creation process with &kiwi; is automated and does not require any user
    interaction. Any information required for the image creation process is
    provided by the primary configuration file: <literal>config.xml</literal>.
    In addition, the image can optionally be customized using the
    <literal>config.sh</literal> and <literal>images.sh</literal> scripts.
   </para>
   <note>
    <para>
     It is important to distinguish between KIWI NG (currently version 9.20.9)
     and it’s unmaintained legacy versions (7.x.x or older), now called
     <link xlink:href="https://doc.opensuse.org/projects/kiwi/doc/">KIWI
     Legacy</link>.
    </para>
   </note>
   <para>
    For specific information on how to install &kiwi; and use it to build
    images, see the <link xlink:href="http://osinside.github.io/kiwi/">KIWI
    documentation</link>. A collection of example image descriptions can be
    found on the
    <link xlink:href="https://github.com/OSInside/kiwi-descriptions">KIWI
    GitHub repository</link>.
   </para>
   <para>
    You can also find out more about &kiwi; through it’s man pages by
    installing the <literal>kiwi-man-pages</literal> package and running the
    <literal>man kiwi</literal> command.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="id-building-official-slea-images">
  <title>Building Official &slea; Images</title>

  <para>
   Only images built via the Internal Build Service,
   <emphasis role="strong">build.suse.de</emphasis>, can be official.
  </para>

  <para>
   There are no official SLE container images on
   <link xlink:href="https://build.opensuse.org">https://build.opensuse.org</link>
   and the RPMs exported there are also not identical to the internal ones.
   This means that it is impossible to build officially supported images on
   <link xlink:href="https://build.opensuse.org">https://build.opensuse.org</link>.
  </para>
 </sect1>
</chapter>
